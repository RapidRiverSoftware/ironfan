bash -c '
<%= "export http_proxy=\"#{knife_config[:bootstrap_proxy]}\"" if knife_config[:bootstrap_proxy] -%>

if [ ! -f /usr/bin/chef-client ]; then
  gem update --system --no-rdoc --no-ri
  gem install ohai --no-rdoc --no-ri --verbose
  gem install chef --no-rdoc --no-ri --verbose <%= bootstrap_version_string %>
fi

mkdir -p /etc/chef

(
cat <<'EOP'
<%= validation_key %>
EOP
) > /tmp/validation.pem
awk NF /tmp/validation.pem > /etc/chef/validation.pem
rm /tmp/validation.pem
chmod 600 /etc/chef/validation.pem

<% if @chef_config[:encrypted_data_bag_secret] -%>
(
cat <<'EOP'
<%= encrypted_data_bag_secret %>
EOP
) > /tmp/encrypted_data_bag_secret
awk NF /tmp/encrypted_data_bag_secret > /etc/chef/encrypted_data_bag_secret
rm /tmp/encrypted_data_bag_secret
<% end -%>

(
cat <<'EOP'
<%= config_content %>
EOP
) > /etc/chef/client.rb

<%# BEGIN  adding dns to ip mappings in /etc/hosts for VMs in Aurora Network. %>
<%# domain = 'eng.vmware.com' %>
<% domain = 'example.aurora' %>
grep <%= domain %> /etc/resolv.conf
if [ $? -eq 0 ]; then

dhcpname=<%= [@config[:node].cluster_name, @config[:node].facet_name, @config[:node].facet_index].join('-') %>
echo "setting hostname to $dhcpname" # something like 'clustername-namenode-0'
echo $dhcpname > /etc/hostname
hostname $dhcpname
/sbin/dhclient

<%
require 'chef/knife'
hosts = {}
servers = Ironfan::Cluster.new(@config[:node].cluster_name).servers
servers.each do |chef_server|
  svr = chef_server.fog_server
  hosts[svr.name] = "#{svr.public_ip_address}  #{svr.name}.#{domain}  #{svr.name}" if svr
end
%>
echo "adding dns to ip mappings in /etc/hosts for VMs in Aurora Network."
<% hosts.map do |hostname, mapping| %>
grep -q <%= hostname %> /etc/hosts
if [ $? -ne 0 ]; then
  echo "adding <%= mapping %> into /etc/hosts"
  echo "<%= mapping %>" >> /etc/hosts
fi

<% end %>
fi
<%# END %> 

<%# BEGIN  generating private key for the new client to avoid 401 error when bootstrapping chef nodes %>
<% 
require 'chef/api_client'
private_key = nil
client_name = [@config[:node].cluster_name, @config[:node].facet_name, @config[:node].facet_index].join('-')
client = Chef::ApiClient.load(client_name) rescue client = nil
Chef::Log.info("Tips for 401 Unauthorized Error: if chef-client throws 401 error, first check if the time on the VM is set correctly, then try bootstrap again after executing 'knife client delete #{client_name}'.")
Chef::Log.info("Tips for 403 Forbidden Error   : if chef-client throws 403 error, try bootstrap again after executing 'knife node delete #{client_name}'; if still doesn't work, try regenerating your organization's private key on Opscode.")
if client.nil? then
  Chef::Log.debug("generating private key for the new client #{client_name}")
  client = Chef::ApiClient.new
  client.name(client_name)
  client.admin(false)
  key = client.save(new_key=true)
  private_key = key['private_key']
end
%>
<% if private_key -%>
(
cat <<'EOP'
<%= private_key %>
EOP
) > /etc/chef/client.pem
chmod 600 /etc/chef/client.pem
<% end -%>
<%# END %> 

(
cat <<'EOP'
<%= { "run_list" => @run_list, "cluster_name" => @config[:node].cluster_name, "facet_name" => @config[:node].facet_name, "facet_index" => @config[:node].facet_index }.to_json %>
EOP
) > /etc/chef/first-boot.json

<%= start_chef %>'

